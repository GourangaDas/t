<html>

<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="UTF-8">
    <meta name="description" content="Nagaland Lottery Result">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<body>

    <style type="text/css">
        .res-full {
            width: 860px;
            height: auto;
            margin: 0 auto;
            background: #fff;
        }
        
        .res-start {
            float: left;
            height: auto;
            width: 844px;
            min-height: 500px;
            margin: 5px 5px 5px 5px;
            text-align: left;
            color: #000;
        }
        
        .res-start-1 {
            float: left;
            height: auto;
            margin: 2px;
            text-align: left;
            font-weight: bold;
            border: 1px solid #000;
        }
        
        .one {
            width: 844px;
            font-family: Calibri, sans-serif;
            line-height: 35px;
            font-size: 26px;
            color: #000;
            float: left;
            margin: 0;
            text-align: center;
        }
        
        .two {
            width: 844px;
            font-family: "Arial", sans-serif;
            font-size: 26px;
            color: #000;
            float: left;
            margin: 0;
            text-align: center;
            line-height: 35px;
        }
        
        .three {
            float: left;
            width: 844px;
            height: auto;
        }
        
        .four {
            float: left;
            width: 844px;
            text-align: center;
            margin: 0 auto;
            height: auto;
        }
        
        .five {
            float: left;
            width: 844px;
            text-align: center;
            font-family: 'Courier New', Courier, monospace;
            font-weight: bold;
            font-size: 24px;
            margin: 0 auto;
            height: auto;
        }
        
        img {
            max-width: 824px;
        }
    </style>



    <div class="res-start">

        <div style="float: left; width: 844px; height: auto; border: 3px solid #000; margin:5px 0 0 0;">

            <div style="float: left; width: 844px; height: auto; font-family: 'Courier New', Courier, monospace; font-weight: bold;">

                <div style="float: left; width: 844px; height: auto; font-size: 18px; font-weight: 600;">

                    <div class="three">
                        <p style="width: 844px; font-family:'Courier New', Courier, monospace; font-size: 25px; margin: 2px; float: left; text-align: center;">NAGALAND STATE LOTTERIES</p>
                    </div>

                    <div class="three">
                        <div style="float: left; width: 200px; height: auto;">
                            <p style="font-size: 30px; font-family: Arial; padding: 0 0 18px 10px; margin: 0;font-weight: bolder; text-align: left; line-height:20px;">
                                %1$s</p>
                            <p style="font-size: 29px; font-family: Arial;padding: 0 0 0 10px; margin: 0;font-weight: bolder; text-align: left;">
                                %2$s</p>
                        </div>
                        <div style="float: left; width: 424px; height: auto; margin:0 0 5px 0;">
                            <p style="font-size: 95px; font-family: sans-serif; padding: 0px 10px 0px 10px; margin: 0;font-weight: bolder; text-align: center;line-height: 75px;color: rgb(7, 120, 30);">
                                DEAR</p>
                            <p style="font-size: 24px; font-family: Arial;padding: 0; margin: 0;font-weight: bolder; text-align: center; line-height:30px;color: rgb(7, 120, 30);">
                                %3$s</p>
                            <p style="font-size: 24px; font-family: Arial;padding: 0; margin: 0;font-weight: bolder; text-align: center; line-height:30px;color: rgb(7, 120, 30);">
                                %4$s</p>


                        </div>

                        <div style="float: left; width: 200px; height: auto;">
                            <p style="font-size: 30px; font-family: Arial; padding: 0 0 18px 10px; margin: 0;font-weight: bolder; text-align: right; line-height:20px;">%1$s</p>
                            <p style="font-size: 29px; font-family: Arial;padding: 0 0 0 10px; margin: 0;font-weight: bolder; text-align: right;">
                                %2$s</p>
                        </div>
                    </div>

                    <div style="float: left; width: 844px; height: auto; margin: 0 0 20px 5px;">

                        <p style="float: left; width: 844px; font-family: 'Courier New', Courier, monospace; font-size: 24px; font-weight: bold; padding: 0; margin: 0 0 7px 0; text-align: center;">
                            %5$s Draw held on %1$s Price ₹ %6$s</p>

                    </div>

                    <div class="four">
                        <p style="width: auto; font-family: Arial; line-height: 30px; font-size: 42px; font-weight:bolder; color: #3213f6; float: left; margin: 0 0 0 20px; text-align: right;">
                            1st Prize</p>
                        <p style="width: auto; font-family: Arial; line-height: 40px; font-size: 38px; font-weight:normal; color: #000; float: left; margin: 0 5px 0 0; text-align: right;">
                            ₹</p>
                        <p style="width: auto; font-family: Arial; line-height: 25px; font-size: 68px; font-weight:bolder; color: #f00; float: left; margin: -8px 0 0 10px; text-align: center;">
                            %7$s</p>
                        <p style="width: auto; font-family: Arial; line-height: 30px; font-size: 42px; font-weight:bolder; color: #3213f6; float: left; margin: 0 0 0 10px; text-align: left;">
                            %8$s</p>
                        <p style="width: 844px; font-family: Arial; line-height: 15px; font-size: 16px; color: #000; float: left; margin: 0; text-align: center;">
                            (Including Super Prize Amt)</p>
                    </div>

                    <div class="three" style="margin-bottom: 10px;">
                        <p class="two" style="color: #dc08ee; line-height: 20px; margin:5px 0 0 0; font-size: 17px; ">
                            %9$s</p>
                        <p class="two" style="font-size: 20px; font-family: Arial, sans-serif; ">Cons Prize ₹%10$s %11$s (REMAINING ALL SERIALS)</p>
                        <p class="five">2nd Prize ₹%12$s</p>
                        <p class="five" style="font-size: 21px;">%13$s</p>
                        <p class="five">3rd Prize ₹%14$s</p>
                        <p class="five">%15$s</p>
                        <p class="five">4th Prize ₹%16$s</p>
                        <p class="five">%17$s</p>
                    </div>
                    <div style="width: 824px; margin: 5px;">
                        <img src="%18$s" />
                    </div>
                    <div class="three" style="margin-top: 10px;">
                        <p class="five">5th Prize ₹%19$s</p>
                        <p class="five">%20$s</p>
                        <p class="five">%21$s</p>
                        <p class="five">%22$s</p>
                        <p class="five">%23$s</p>
                        <p class="five">%24$s</p>
                        <p class="five">%25$s</p>
                        <p class="five">%26$s</p>
                        <p class="five">%27$s</p>
                        <p class="five">%28$s</p>
                        <p class="five">%29$s</p>

                    </div>

                </div>

            </div>

        </div>

        <div style="float: left; width: 840px; height: auto; border-bottom: 2px solid #000;">
            <p style="width: auto; text-align: center; font-family: 'Courier New', Courier, monospace; font-size: 16px; font-weight: bold; padding:0; margin: 5px 0 5px 0;">
                Please check the results with relevent Official Government Gazatte</p>
        </div>

        <div style="float: left; width: 840px; height: auto;">

            <span style="font-family: 'Arial Black', Arial; font-size: 20px; padding: 0 0 0px 15px; margin: 0; text-align: center; width: 840px; float: left; font-weight: bold; line-height:30px">
                %2$s RESULT %1$s</span>

        </div>

    </div>

</body>

</html>